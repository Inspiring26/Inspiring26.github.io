<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你说你要一场革命</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://inspiring26.github.io/"/>
  <updated>2020-05-12T03:16:33.401Z</updated>
  <id>https://inspiring26.github.io/</id>
  
  <author>
    <name>huang yong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>unity脚本修改数据无效问题</title>
    <link href="https://inspiring26.github.io/2020/05/12/unity%E8%84%9A%E6%9C%AC%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://inspiring26.github.io/2020/05/12/unity脚本修改数据无效问题/</id>
    <published>2020-05-12T03:14:00.000Z</published>
    <updated>2020-05-12T03:16:33.401Z</updated>
    
    <content type="html"><![CDATA[<p>unity中修改脚本数据后经常会发现运行时并没有使用修改后的数据，<br>尤其是数组数据等。</p><p>这时需要在脚本对应的inspector里点击齿轮，选择reset，此后就会使用脚本里的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;unity中修改脚本数据后经常会发现运行时并没有使用修改后的数据，&lt;br&gt;尤其是数组数据等。&lt;/p&gt;
&lt;p&gt;这时需要在脚本对应的inspector里点击齿轮，选择reset，此后就会使用脚本里的数据。&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>多出编辑更新hexo博客方法</title>
    <link href="https://inspiring26.github.io/2020/05/06/%E5%A4%9A%E5%87%BA%E7%BC%96%E8%BE%91%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/"/>
    <id>https://inspiring26.github.io/2020/05/06/多出编辑更新hexo博客方法/</id>
    <published>2020-05-06T06:20:18.000Z</published>
    <updated>2020-05-07T05:27:53.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先在原博客处建立分支，将hexo后端文件同步到github"><a href="#首先在原博客处建立分支，将hexo后端文件同步到github" class="headerlink" title="首先在原博客处建立分支，将hexo后端文件同步到github"></a>首先在原博客处建立分支，将hexo后端文件同步到github</h3><p>如source分支<br>hexo建立的blog，一开始是没有git init的，这一点记不清了也没验证。<br>要把源文件更新到github的话，先git init，然后建立、切换分支，提交，添加远程git仓库地址，推送本地到远程。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git init</span><br><span class="line">git checkout -b source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;init blog&quot;</span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.github.io.git</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><br>在这以后是可以切换master和source分支的。</p><a id="more"></a><h3 id="在树莓派上配置环境"><a href="#在树莓派上配置环境" class="headerlink" title="在树莓派上配置环境"></a>在树莓派上配置环境</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><p>使用二进制代码安装比较好，也不需要编译.<br>先去node.js官方网站下载：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a><br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v12.16.3&#x2F;node-v12.16.3-linux-armv7l.tar.xz</span><br><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs</span><br><span class="line">sudo tar -xJvf node-v12.16.3-linux-armv7l.tar.xz -C &#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs</span><br><span class="line">cd ~</span><br><span class="line">sudo echo &quot;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs&#x2F;node-v12.16.3-linux-armv7l&#x2F;bin:$PATH&quot; &gt;&gt; .bashrc</span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><br>然后，用hexo -v ;npm -v 验证版本。</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>以管理员权限安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h4 id="git-clone-远程仓库"><a href="#git-clone-远程仓库" class="headerlink" title="git clone 远程仓库"></a>git clone 远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@XXX</span><br><span class="line"># 切换到新分支</span><br><span class="line"># 这里需要新建并切换</span><br><span class="line">git checkout -b source origin&#x2F;source</span><br></pre></td></tr></table></figure><h4 id="切换到blog文件夹运行hexo"><a href="#切换到blog文件夹运行hexo" class="headerlink" title="切换到blog文件夹运行hexo"></a>切换到blog文件夹运行hexo</h4><p>运行hexo，这时回报错，根据提示再次安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br><span class="line">npm audit fix</span><br></pre></td></tr></table></figure></p><h4 id="去专门的仓库拉去主题（这一步也可以改成将主题下的-git文件删除，一次拉去源文件和主题的）"><a href="#去专门的仓库拉去主题（这一步也可以改成将主题下的-git文件删除，一次拉去源文件和主题的）" class="headerlink" title="去专门的仓库拉去主题（这一步也可以改成将主题下的.git文件删除，一次拉去源文件和主题的）"></a>去专门的仓库拉去主题（这一步也可以改成将主题下的.git文件删除，一次拉去源文件和主题的）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd theme</span><br><span class="line">rm -r next</span><br><span class="line">git clone git@XXX</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;测试文章&quot;</span><br><span class="line">vim source&#x2F;_posts&#x2F;测试文章.md</span><br></pre></td></tr></table></figure><h4 id="将两处连接添加到文章末尾（希望在文末追加一些固定文字时才需要此步骤）"><a href="#将两处连接添加到文章末尾（希望在文末追加一些固定文字时才需要此步骤）" class="headerlink" title="将两处连接添加到文章末尾（希望在文末追加一些固定文字时才需要此步骤）"></a>将两处连接添加到文章末尾（希望在文末追加一些固定文字时才需要此步骤）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat links.txt &gt;&gt; source&#x2F;_posts&#x2F;多出编辑更新hexo博客方法.md</span><br></pre></td></tr></table></figure><h4 id="验证本地运行"><a href="#验证本地运行" class="headerlink" title="验证本地运行"></a>验证本地运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="验证远程推送到github-page"><a href="#验证远程推送到github-page" class="headerlink" title="验证远程推送到github page"></a>验证远程推送到github page</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure><h3 id="验证成功后可以推送源文件的更新到github的source分支"><a href="#验证成功后可以推送源文件的更新到github的source分支" class="headerlink" title="验证成功后可以推送源文件的更新到github的source分支"></a>验证成功后可以推送源文件的更新到github的source分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>老博客地址：<a href="https://www.jianshu.com/u/1c73a3a8ae2d" target="_blank" rel="noopener">https://www.jianshu.com/u/1c73a3a8ae2d</a><br>新博客地址：<a href="https://inspiring26.github.io/">https://inspiring26.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先在原博客处建立分支，将hexo后端文件同步到github&quot;&gt;&lt;a href=&quot;#首先在原博客处建立分支，将hexo后端文件同步到github&quot; class=&quot;headerlink&quot; title=&quot;首先在原博客处建立分支，将hexo后端文件同步到github&quot;&gt;&lt;/a&gt;首先在原博客处建立分支，将hexo后端文件同步到github&lt;/h3&gt;&lt;p&gt;如source分支&lt;br&gt;hexo建立的blog，一开始是没有git init的，这一点记不清了也没验证。&lt;br&gt;要把源文件更新到github的话，先git init，然后建立、切换分支，提交，添加远程git仓库地址，推送本地到远程。&lt;br&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;init blog&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:&amp;#123;username&amp;#125;&amp;#x2F;&amp;#123;username&amp;#125;.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin source&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;在这以后是可以切换master和source分支的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="hexo" scheme="https://inspiring26.github.io/tags/hexo/"/>
    
      <category term="git" scheme="https://inspiring26.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上编辑更新测试</title>
    <link href="https://inspiring26.github.io/2020/05/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E7%BC%96%E8%BE%91%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95/"/>
    <id>https://inspiring26.github.io/2020/05/06/树莓派上编辑更新测试/</id>
    <published>2020-05-06T06:18:38.000Z</published>
    <updated>2020-05-07T05:27:53.741Z</updated>
    
    <content type="html"><![CDATA[<p>这是在树莓派上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是在树莓派上&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="测试" scheme="https://inspiring26.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>多处编辑测试</title>
    <link href="https://inspiring26.github.io/2020/05/06/%E5%A4%9A%E5%A4%84%E7%BC%96%E8%BE%91%E6%B5%8B%E8%AF%95/"/>
    <id>https://inspiring26.github.io/2020/05/06/多处编辑测试/</id>
    <published>2020-05-06T03:44:57.000Z</published>
    <updated>2020-05-07T05:27:53.741Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="测试" scheme="https://inspiring26.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客多处更新，多处git控制的经验</title>
    <link href="https://inspiring26.github.io/2020/04/28/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E5%A4%84%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%A4%9A%E5%A4%84git%E6%8E%A7%E5%88%B6%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
    <id>https://inspiring26.github.io/2020/04/28/hexo博客多处更新，多处git控制的经验/</id>
    <published>2020-04-28T03:14:52.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【注意】本文内容不完善，新的步骤参考-多出编辑更新hexo博客方法"><a href="#【注意】本文内容不完善，新的步骤参考-多出编辑更新hexo博客方法" class="headerlink" title="【注意】本文内容不完善，新的步骤参考 多出编辑更新hexo博客方法"></a>【注意】本文内容不完善，新的步骤参考 <a href="https://inspiring26.github.io/2020/05/06/多出编辑更新hexo博客方法/">多出编辑更新hexo博客方法</a></h3><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在ubuntu主机上有一个hexo的完整环境，可以发布更新博客。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>在ubuntu、MBA、树莓派等设备上都可以进行博客更新，并且数据一致<br>（本文章是在MBA上完成）</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="第一-推送到gitgub"><a href="#第一-推送到gitgub" class="headerlink" title="第一,推送到gitgub"></a>第一,推送到gitgub</h4><p>在ubuntu上hexo根目录，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b source #创建新分支source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;init blog&quot;</span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.github.io.git</span><br><span class="line">git push origin source #本地origin推到source</span><br></pre></td></tr></table></figure><br>单独推送主题文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd theme&#x2F;next&#x2F;</span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.theme.next.git #这个仓库是新建的，专门用来存放改动过的主题next</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><h4 id="第二，安装node环境"><a href="#第二，安装node环境" class="headerlink" title="第二，安装node环境"></a>第二，安装node环境</h4><p>MBA：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install node.js</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>其他端类似，就是安装node和hexo</p><h3 id="第三，pull"><a href="#第三，pull" class="headerlink" title="第三，pull"></a>第三，pull</h3><p>MBA:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.github.io.git</span><br><span class="line">git checkout source</span><br><span class="line">git pull #这两部是切换分支，和拉去改分支文件，其实就是个切换，文件提前一起拉下来了</span><br><span class="line">cd theme</span><br><span class="line">git clone git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.theme.next.git</span><br><span class="line">mv theme.next next</span><br><span class="line">cd ..</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>到次应该可以正常运行了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要git clone某个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:&#123;username&#125;&#x2F;&#123;username&#125;.github.io.git</span><br><span class="line">git checkout source</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><br>仓库中有仓库，也就是说.git文件夹的子文件夹还要.git时，<br>在处理上层.git时，会忽略下层的，只保留了个文件夹名</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【注意】本文内容不完善，新的步骤参考-多出编辑更新hexo博客方法&quot;&gt;&lt;a href=&quot;#【注意】本文内容不完善，新的步骤参考-多出编辑更新hexo博客方法&quot; class=&quot;headerlink&quot; title=&quot;【注意】本文内容不完善，新的步骤参考 多出编辑更新hexo博客方法&quot;&gt;&lt;/a&gt;【注意】本文内容不完善，新的步骤参考 &lt;a href=&quot;https://inspiring26.github.io/2020/05/06/多出编辑更新hexo博客方法/&quot;&gt;多出编辑更新hexo博客方法&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在ubuntu主机上有一个hexo的完整环境，可以发布更新博客。&lt;/p&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;在ubuntu、MBA、树莓派等设备上都可以进行博客更新，并且数据一致&lt;br&gt;（本文章是在MBA上完成）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="hexo" scheme="https://inspiring26.github.io/tags/hexo/"/>
    
      <category term="git" scheme="https://inspiring26.github.io/tags/git/"/>
    
      <category term="同步" scheme="https://inspiring26.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
      <category term="多终端" scheme="https://inspiring26.github.io/tags/%E5%A4%9A%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>unity开发的一些感想</title>
    <link href="https://inspiring26.github.io/2020/04/23/unity%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
    <id>https://inspiring26.github.io/2020/04/23/unity开发的一些感想/</id>
    <published>2020-04-23T03:07:09.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h4 id="可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。"><a href="#可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。" class="headerlink" title="可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。"></a>可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。</h4><p>少了错综复杂的引用，当然更清晰，更易于管理。<br>集中管理的好处还是很多的。<br>可以集中的有，数据、帧操作等。</p><a id="more"></a><h4 id="在实现一个逻辑时可以注释列出要做的各个步骤，这样非常易于逻辑的展开"><a href="#在实现一个逻辑时可以注释列出要做的各个步骤，这样非常易于逻辑的展开" class="headerlink" title="在实现一个逻辑时可以注释列出要做的各个步骤，这样非常易于逻辑的展开"></a>在实现一个逻辑时可以注释列出要做的各个步骤，这样非常易于逻辑的展开</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断可点击区域内是否miss</span><br><span class="line">&#x2F;&#x2F; 这个区域可以比正常的状态判定区域稍微大一些，给点晚了的miss一些时间段</span><br><span class="line">&#x2F;&#x2F; 第一步，判断是否在可点按区域。方法是起点一个数组，终点一个数组，如果进入了第一个没进入第二个就是在区域内</span><br><span class="line">&#x2F;&#x2F; 第二步，判断是否点击。方法是起点进入时给一个未点击标识，到达终点时检查一下是否点了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void CloseHearts(int n)&#123;&#x2F;&#x2F;传入丢失星星数</span><br><span class="line">&#x2F;&#x2F; 第一步，将所有heart按顺序装入数组</span><br><span class="line">&#x2F;&#x2F; 第二步，从最后一个开始倒序关闭</span><br><span class="line">for(int i&#x3D;2;i&gt;2-n;i--)&#123;</span><br><span class="line">heartList[i].transform.localScale &#x3D; new Vector3(0f,0f,1f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="游戏体的Find、实例化都放在Start-里，这个不用多说"><a href="#游戏体的Find、实例化都放在Start-里，这个不用多说" class="headerlink" title="游戏体的Find、实例化都放在Start()里，这个不用多说"></a>游戏体的Find、实例化都放在Start()里，这个不用多说</h4><h4 id="尽量一数组的方式进行操作，将问题转为数组，转化为纯粹的数学问题，条理更清晰，运行效率也更高。"><a href="#尽量一数组的方式进行操作，将问题转为数组，转化为纯粹的数学问题，条理更清晰，运行效率也更高。" class="headerlink" title="尽量一数组的方式进行操作，将问题转为数组，转化为纯粹的数学问题，条理更清晰，运行效率也更高。"></a>尽量一数组的方式进行操作，将问题转为数组，转化为纯粹的数学问题，条理更清晰，运行效率也更高。</h4><p>老博客地址：<a href="https://www.jianshu.com/u/1c73a3a8ae2d" target="_blank" rel="noopener">https://www.jianshu.com/u/1c73a3a8ae2d</a><br>新博客地址：<a href="https://inspiring26.github.io/">https://inspiring26.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。&quot;&gt;&lt;a href=&quot;#可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。&quot; class=&quot;headerlink&quot; title=&quot;可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。&quot;&gt;&lt;/a&gt;可以新建一个游戏体上面存储所有要操作的数据，如果游戏场景比较多，可以在接近根结点的每个大游戏体上简历几个脚本，分别存储不同的信息。信息集中管理逻辑更清晰，在其他脚本中的引用也更少。&lt;/h4&gt;&lt;p&gt;少了错综复杂的引用，当然更清晰，更易于管理。&lt;br&gt;集中管理的好处还是很多的。&lt;br&gt;可以集中的有，数据、帧操作等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="总结" scheme="https://inspiring26.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>The type or namespace name &#39;Text&#39; could not be found</title>
    <link href="https://inspiring26.github.io/2020/04/22/The-type-or-namespace-name-Text-could-not-be-found/"/>
    <id>https://inspiring26.github.io/2020/04/22/The-type-or-namespace-name-Text-could-not-be-found/</id>
    <published>2020-04-22T02:05:01.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题的原因很可能是没有声明对应的namespaces，<br>在unity中使用UI构建物体，修改或调用其自带的脚本如Text等是需要先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine.UI;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题的原因很可能是没有声明对应的namespaces，&lt;br&gt;在unity中使用UI构建物体，修改或调用其自带的脚本如Text等是需要先&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity的webgl文件夹部署到Apache的详细步骤</title>
    <link href="https://inspiring26.github.io/2020/04/17/unity%E7%9A%84webgl%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%A8%E7%BD%B2%E5%88%B0Apache%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>https://inspiring26.github.io/2020/04/17/unity的webgl文件夹部署到Apache的详细步骤/</id>
    <published>2020-04-17T06:09:27.000Z</published>
    <updated>2020-05-07T05:27:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>在网上找了半天就没有一个把unity发布为webgl，并部署到Apache的详细方法。<br>所以自己写一个</p><h3 id="发布为webgl"><a href="#发布为webgl" class="headerlink" title="发布为webgl"></a>发布为webgl</h3><p>在unity窗口file-&gt;build setting-&gt;<br>选中webgl；<br>至少选中一个场景；<br>webgl右侧什么都不选；<br>然后build and run；<br><img src="/2020/04/17/unity%E7%9A%84webgl%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%A8%E7%BD%B2%E5%88%B0Apache%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/1.0.png" alt></p><a id="more"></a><p>编译结束会在本地浏览器打开网页，要保证这一步哪呢个通说明游戏没问题。</p><h3 id="部署到Apache"><a href="#部署到Apache" class="headerlink" title="部署到Apache"></a>部署到Apache</h3><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h4><p>以ubuntu下为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apache2 -version &#x2F;&#x2F;验证有没有</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br><span class="line">apache2 -version &#x2F;&#x2F;验证是否安装成功</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置UFW防火墙</span><br><span class="line">sudo ufw app list</span><br><span class="line">&#x2F;&#x2F;包含以下信息</span><br><span class="line">Apache</span><br><span class="line">Apache Full</span><br><span class="line">Apache Secure</span><br><span class="line">CUPS</span><br><span class="line">OpenSSH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo ufw allow &#39;Apache&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;验证Apache服务是否正在运行。</span><br><span class="line">&#x2F;&#x2F;其实我在这一项有些功能没有正常运行，但是并没影响后面webgl的运行</span><br><span class="line">sudo systemctl status apache2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可以查看本地ip 方便复制使用</span><br><span class="line">hostname -I</span><br></pre></td></tr></table></figure><br>在浏览器里打开，可以看到apache的默认页面；<br>找到www/html信息的位置；<br>以管理员权限修改index.html文件名；<br>以管理员权限将webgl的Build、TemplateData、index.html文件复制到/var/www/html/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r .&#x2F;* &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure><br><img src="/2020/04/17/unity%E7%9A%84webgl%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%A8%E7%BD%B2%E5%88%B0Apache%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/2.0.png" alt></p><p>打开localhost<br><img src="/2020/04/17/unity%E7%9A%84webgl%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%A8%E7%BD%B2%E5%88%B0Apache%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/2.1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网上找了半天就没有一个把unity发布为webgl，并部署到Apache的详细方法。&lt;br&gt;所以自己写一个&lt;/p&gt;&lt;h3 id=&quot;发布为webgl&quot;&gt;&lt;a href=&quot;#发布为webgl&quot; class=&quot;headerlink&quot; title=&quot;发布为webgl&quot;&gt;&lt;/a&gt;发布为webgl&lt;/h3&gt;&lt;p&gt;在unity窗口file-&amp;gt;build setting-&amp;gt;&lt;br&gt;选中webgl；&lt;br&gt;至少选中一个场景；&lt;br&gt;webgl右侧什么都不选；&lt;br&gt;然后build and run；&lt;br&gt;&lt;img src=&quot;/2020/04/17/unity%E7%9A%84webgl%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%A8%E7%BD%B2%E5%88%B0Apache%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/1.0.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="Apache" scheme="https://inspiring26.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>unity/c#数组装变量的两种方法</title>
    <link href="https://inspiring26.github.io/2020/04/17/unity-c-%E6%95%B0%E7%BB%84%E8%A3%85%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://inspiring26.github.io/2020/04/17/unity-c-数组装变量的两种方法/</id>
    <published>2020-04-17T02:44:47.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>一开始想详细写，后因全栈开发较忙，搁置了一段时间，现简单描述一下</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><h4 id="使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等"><a href="#使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等" class="headerlink" title="使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等"></a>使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等</h4><h4 id="直接用他们申明数组，多维的用下面之类的格式"><a href="#直接用他们申明数组，多维的用下面之类的格式" class="headerlink" title="直接用他们申明数组，多维的用下面之类的格式"></a>直接用他们申明数组，多维的用下面之类的格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Rigidbody2D[,] R2D &#x3D; new Rigidbody2D[10,27];</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="注意不能对太底层的申明，因为那就是深拷贝了，无法达到引用的目的"><a href="#注意不能对太底层的申明，因为那就是深拷贝了，无法达到引用的目的" class="headerlink" title="注意不能对太底层的申明，因为那就是深拷贝了，无法达到引用的目的"></a>注意不能对太底层的申明，因为那就是深拷贝了，无法达到引用的目的</h4><p>深浅拷贝可以看这里<img src="https://blog.csdn.net/u014771617/article/details/45398955" alt="https://blog.csdn.net/u014771617/article/details/45398955"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><h4 id="使用object声明，"><a href="#使用object声明，" class="headerlink" title="使用object声明，"></a>使用object声明，</h4><h4 id="之后再对数组进行转型，如下"><a href="#之后再对数组进行转型，如下" class="headerlink" title="之后再对数组进行转型，如下"></a>之后再对数组进行转型，如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newlsit &#x3D; (AudioClip[])someList;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始想详细写，后因全栈开发较忙，搁置了一段时间，现简单描述一下&lt;/p&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;h4 id=&quot;使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等&quot;&gt;&lt;a href=&quot;#使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等&quot; class=&quot;headerlink&quot; title=&quot;使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等&quot;&gt;&lt;/a&gt;使用打印功能擦看出对应的类型AudioClip、Rigidbody2D等&lt;/h4&gt;&lt;h4 id=&quot;直接用他们申明数组，多维的用下面之类的格式&quot;&gt;&lt;a href=&quot;#直接用他们申明数组，多维的用下面之类的格式&quot; class=&quot;headerlink&quot; title=&quot;直接用他们申明数组，多维的用下面之类的格式&quot;&gt;&lt;/a&gt;直接用他们申明数组，多维的用下面之类的格式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public Rigidbody2D[,] R2D &amp;#x3D; new Rigidbody2D[10,27];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity2D朝向目标的方法</title>
    <link href="https://inspiring26.github.io/2020/04/17/unity2D%E6%9C%9D%E5%90%91%E7%9B%AE%E6%A0%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://inspiring26.github.io/2020/04/17/unity2D朝向目标的方法/</id>
    <published>2020-04-17T01:42:16.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>以火箭始终朝向砖块为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector3 dir &#x3D; brickList[target%10].transform.position - rocket.transform.position;</span><br><span class="line">float angle &#x3D; Mathf.Atan2(dir.y,dir.x) * Mathf.Rad2Deg;</span><br><span class="line">rocket.transform.rotation &#x3D; Quaternion.AngleAxis(270+angle, Vector3.forward);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="Mathf-Atan2"><a href="#Mathf-Atan2" class="headerlink" title="Mathf.Atan2"></a>Mathf.Atan2</h3><p>反正弦函数，输入两个参数：y轴长度、x轴长度<br>如Mathf.Atan2(1,1)的值为0.7853982，约是3.14除以4。</p><h3 id="Mathf-Rad2Deg"><a href="#Mathf-Rad2Deg" class="headerlink" title="Mathf.Rad2Deg"></a>Mathf.Rad2Deg</h3><p>弧度到度的转化常量，等于360/（PI*2）<br>还有一个相反的函数Mathf.Deg2Rad</p><h3 id="Quaternion-AngleAxis"><a href="#Quaternion-AngleAxis" class="headerlink" title="Quaternion.AngleAxis"></a>Quaternion.AngleAxis</h3><p>Quaternion是unity中的四元数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;transform沿y轴旋转30度 </span><br><span class="line">transform.rotation &#x3D; Quaternion.AngleAxis(30, Vector3.up); </span><br><span class="line">&#x2F;&#x2F;transform沿z轴旋转30度 </span><br><span class="line">transform.rotation &#x3D; Quaternion.AngleAxis(30, Vector3.forward); </span><br><span class="line">&#x2F;&#x2F;transform沿x轴旋转30度 </span><br><span class="line">transform.rotation &#x3D; Quaternion.AngleAxis(30, Vector3.left);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以火箭始终朝向砖块为例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vector3 dir &amp;#x3D; brickList[target%10].transform.position - rocket.transform.position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float angle &amp;#x3D; Mathf.Atan2(dir.y,dir.x) * Mathf.Rad2Deg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rocket.transform.rotation &amp;#x3D; Quaternion.AngleAxis(270+angle, Vector3.forward);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity加载图片、音乐及替换到指定组件上的总结</title>
    <link href="https://inspiring26.github.io/2020/04/15/unity%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E3%80%81%E9%9F%B3%E4%B9%90%E5%8F%8A%E6%9B%BF%E6%8D%A2%E5%88%B0%E6%8C%87%E5%AE%9A%E7%BB%84%E4%BB%B6%E4%B8%8A%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>https://inspiring26.github.io/2020/04/15/unity加载图片、音乐及替换到指定组件上的总结/</id>
    <published>2020-04-15T07:46:44.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>我这里是通过c#的object和unity的GameObject分别读取，然后贴在GameObject的组件的clip上，之后可以直接对组件调用Play()、Pause()、Stop()方法，和对loop之类的参数赋值。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private string[] songList &#x3D; &#123;&quot;fade_cut&quot;,&quot;Flirting_With_June_cut&quot;,&quot;lzttdmg_cut&quot;,&quot;Ocean_cut&quot;,&quot;Relax_cut&quot;&#125;;</span><br><span class="line">private object objs;</span><br><span class="line">private GameObject GObject;</span><br><span class="line"></span><br><span class="line">public void LoadMusic(int num)&#123;</span><br><span class="line">objs &#x3D; Resources.Load(songList[num]);</span><br><span class="line">GObject.GetComponent&lt;AudioSource&gt;().clip &#x3D; (AudioClip)objs; </span><br><span class="line">GObject.GetComponent&lt;AudioSource&gt;().Play();</span><br><span class="line">GObject.GetComponent&lt;AudioSource&gt;().loop &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Start()&#123;</span><br><span class="line">    GObject &#x3D; GameObject.Find(&quot;SelectionPage&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以提前加载的尽量方Start()里加载，示例中也可以提前加载成数组，但是考虑到内存资源的的占用使用的逐个加载。<br>以上使用了c#自带方法，提供了一种理解角度，更符合unity语法的方法如下：</p><a id="more"></a><h4 id="读取（unity风格）-主流方法）"><a href="#读取（unity风格）-主流方法）" class="headerlink" title="读取（unity风格）(主流方法）"></a>读取（unity风格）(主流方法）</h4><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private string[] songList &#x3D; &#123;&quot;fade_cut&quot;,&quot;Flirting_With_June_cut&quot;,&quot;lzttdmg_cut&quot;,&quot;Ocean_cut&quot;,&quot;Relax_cut&quot;&#125;;</span><br><span class="line">    private AudioClip objs;</span><br><span class="line">    private GameObject GObject;</span><br><span class="line"></span><br><span class="line">    public void LoadMusic(int num)&#123;</span><br><span class="line">    objs &#x3D; Resources.Load(songList[num], typeof(AudioClip)) as AudioClip;</span><br><span class="line">    GObject.GetComponent&lt;AudioSource&gt;().clip &#x3D; objs;</span><br><span class="line">    GObject.GetComponent&lt;AudioSource&gt;().Play();</span><br><span class="line">    GObject.GetComponent&lt;AudioSource&gt;().loop &#x3D; true;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void Start()&#123;</span><br><span class="line">        GObject &#x3D; GameObject.Find(&quot;SelectionPage&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resources.Load(路径, typeof(目标格式)) as 目标格式;</span><br></pre></td></tr></table></figure><br>形式读取。</p><h4 id="更简洁的写法"><a href="#更简洁的写法" class="headerlink" title="更简洁的写法"></a>更简洁的写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private string[] songList &#x3D; &#123;&quot;fade_cut&quot;,&quot;Flirting_With_June_cut&quot;,&quot;lzttdmg_cut&quot;,&quot;Ocean_cut&quot;,&quot;Relax_cut&quot;&#125;;</span><br><span class="line">    private AudioClip objs;</span><br><span class="line">    private GameObject GObject;</span><br><span class="line">    private AudioSource audioSource;</span><br><span class="line"></span><br><span class="line">    public void LoadMusic(int num)&#123;</span><br><span class="line">    objs &#x3D; Resources.Load(songList[num], typeof(AudioClip)) as AudioClip;</span><br><span class="line">    audioSource.clip &#x3D; objs;</span><br><span class="line">    audioSource.Play();</span><br><span class="line">    audioSource.loop &#x3D; true;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        GObject &#x3D; GameObject.Find(&quot;SelectionPage&quot;);</span><br><span class="line">        Debug.Log(GObject.GetComponent&lt;AudioSource&gt;()); &#x2F;&#x2F; 查看要用变量指代的具体是什么类型</span><br><span class="line">        audioSource &#x3D; GObject.GetComponent&lt;AudioSource&gt;();</span><br><span class="line"></span><br><span class="line">        LoadMusic(0); &#x2F;&#x2F; 打开游戏就播放</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以更进一步用变量替代重复的调用语句，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GObject.GetComponent&lt;AudioSource&gt;()</span><br></pre></td></tr></table></figure><br><img src="/2020/04/15/unity%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E3%80%81%E9%9F%B3%E4%B9%90%E5%8F%8A%E6%9B%BF%E6%8D%A2%E5%88%B0%E6%8C%87%E5%AE%9A%E7%BB%84%E4%BB%B6%E4%B8%8A%E7%9A%84%E6%80%BB%E7%BB%93/1.1.png" alt><br>具体声明为什么格式，可以先打印看一下。<br>另外开场就进行的操作，如播放音乐，可以放在Start()里。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要注意的是要播放音乐，必须先把音乐组件放在某个游戏体上，不能凭空播放音乐。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h4><p>读取系统自带的图像组件，必须使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine.UI;</span><br></pre></td></tr></table></figure><br>否则会找不到Image。</p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private Image icon;</span><br><span class="line">public Sprite sp1,sp2;</span><br><span class="line">public void ChangeThePicture()&#123;</span><br><span class="line"></span><br><span class="line">if(this.GetComponent&lt;Scrollbar&gt;().value &lt; 0.5)&#123;</span><br><span class="line"></span><br><span class="line">icon.sprite &#x3D; sp1;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">icon.sprite &#x3D; sp2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; Start is called before the first frame update</span><br><span class="line">   void Start()</span><br><span class="line">   &#123;</span><br><span class="line">       icon &#x3D; this.GetComponent&lt;Image&gt;();</span><br><span class="line">       sp1 &#x3D; Resources.Load(&quot;Pictures&#x2F;SettingPage&#x2F;矩形 3943 拷贝&quot;, typeof(Sprite)) as Sprite;</span><br><span class="line">       sp2 &#x3D; Resources.Load(&quot;Pictures&#x2F;SettingPage&#x2F;bg_kaiguan&quot;, typeof(Sprite)) as Sprite;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>图片挂的是sprite，音乐挂的是clip，都不是检视窗口内左侧的对应名字。<br>出于节省资源的考虑，可以把sp1、sp2这种多次使用的图片在父物体里以public方式加载，在当前脚本里调用即可，不在当前脚本加载是为了保持脚本重复利用。<br>于是另一个结论，重复利用的脚本不加载资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音乐&quot;&gt;&lt;a href=&quot;#音乐&quot; class=&quot;headerlink&quot; title=&quot;音乐&quot;&gt;&lt;/a&gt;音乐&lt;/h3&gt;&lt;h4 id=&quot;读取&quot;&gt;&lt;a href=&quot;#读取&quot; class=&quot;headerlink&quot; title=&quot;读取&quot;&gt;&lt;/a&gt;读取&lt;/h4&gt;&lt;p&gt;我这里是通过c#的object和unity的GameObject分别读取，然后贴在GameObject的组件的clip上，之后可以直接对组件调用Play()、Pause()、Stop()方法，和对loop之类的参数赋值。&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private string[] songList &amp;#x3D; &amp;#123;&amp;quot;fade_cut&amp;quot;,&amp;quot;Flirting_With_June_cut&amp;quot;,&amp;quot;lzttdmg_cut&amp;quot;,&amp;quot;Ocean_cut&amp;quot;,&amp;quot;Relax_cut&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private object objs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private GameObject GObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void LoadMusic(int num)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	objs &amp;#x3D; Resources.Load(songList[num]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GObject.GetComponent&amp;lt;AudioSource&amp;gt;().clip &amp;#x3D; (AudioClip)objs; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GObject.GetComponent&amp;lt;AudioSource&amp;gt;().Play();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GObject.GetComponent&amp;lt;AudioSource&amp;gt;().loop &amp;#x3D; true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Start()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GObject &amp;#x3D; GameObject.Find(&amp;quot;SelectionPage&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可以提前加载的尽量方Start()里加载，示例中也可以提前加载成数组，但是考虑到内存资源的的占用使用的逐个加载。&lt;br&gt;以上使用了c#自带方法，提供了一种理解角度，更符合unity语法的方法如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="总结" scheme="https://inspiring26.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>unity脚本里的this和获取Scrollbar里的滑动值</title>
    <link href="https://inspiring26.github.io/2020/04/15/unity%E8%84%9A%E6%9C%AC%E9%87%8C%E7%9A%84this%E5%92%8C%E8%8E%B7%E5%8F%96Scrollbar%E9%87%8C%E7%9A%84%E6%BB%91%E5%8A%A8%E5%80%BC/"/>
    <id>https://inspiring26.github.io/2020/04/15/unity脚本里的this和获取Scrollbar里的滑动值/</id>
    <published>2020-04-15T07:10:01.000Z</published>
    <updated>2020-05-07T05:27:53.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在脚本里使用this替代GameObject-Find-“”-，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。"><a href="#在脚本里使用this替代GameObject-Find-“”-，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。" class="headerlink" title="在脚本里使用this替代GameObject.Find(“”)，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。"></a>在脚本里使用this替代GameObject.Find(“”)，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。</h3><h3 id="通过"><a href="#通过" class="headerlink" title="通过"></a>通过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.GetComponent&lt;Scrollbar&gt;().value</span><br></pre></td></tr></table></figure><a id="more"></a><p>就可以获得Scrollbar的滑动值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在脚本里使用this替代GameObject-Find-“”-，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。&quot;&gt;&lt;a href=&quot;#在脚本里使用this替代GameObject-Find-“”-，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。&quot; class=&quot;headerlink&quot; title=&quot;在脚本里使用this替代GameObject.Find(“”)，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。&quot;&gt;&lt;/a&gt;在脚本里使用this替代GameObject.Find(“”)，可以让一个脚本在多个相似功能的游戏体上使用，this指挂载的那个游戏体。&lt;/h3&gt;&lt;h3 id=&quot;通过&quot;&gt;&lt;a href=&quot;#通过&quot; class=&quot;headerlink&quot; title=&quot;通过&quot;&gt;&lt;/a&gt;通过&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.GetComponent&amp;lt;Scrollbar&amp;gt;().value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity命名、文件夹注意事项</title>
    <link href="https://inspiring26.github.io/2020/04/15/unity%E5%91%BD%E5%90%8D%E3%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://inspiring26.github.io/2020/04/15/unity命名、文件夹注意事项/</id>
    <published>2020-04-15T02:26:05.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="unity的游戏体一定要好好命名，不要重名"><a href="#unity的游戏体一定要好好命名，不要重名" class="headerlink" title="unity的游戏体一定要好好命名，不要重名"></a>unity的游戏体一定要好好命名，不要重名</h3><p>不重名是因为后续基本都是用GameObject.Find(“”)查找游戏体。</p><p>查找的时候务必加上多级路径提升查找效率；<br>多次使用要提前查找、赋值给变量；<br>所有查找放在Start()里。</p><a id="more"></a><p>命名除了列表内容不使用数字，用能表达出意思的英文。</p><h3 id="Assets至少应该包括Resources、Scenes、Scripts、Pictures文件夹"><a href="#Assets至少应该包括Resources、Scenes、Scripts、Pictures文件夹" class="headerlink" title="Assets至少应该包括Resources、Scenes、Scripts、Pictures文件夹"></a>Assets至少应该包括Resources、Scenes、Scripts、Pictures文件夹</h3><p>Resources存放音视频，应分为多个文件夹，文件夹以主要游戏体命名，如2D开发中画布下的游戏体。除非有特殊的需求，一般不用过于细分。<br>Scenes存放游戏场景，业务量不大的话建议使用一个主场景，一个测试功能的场景。<br>Scripts存放游戏脚本，分为多个文件夹，文件夹以主要游戏体命名。<br>Pictures存放游戏图片，分为多个文件夹，文件夹以主要游戏体命名。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;unity的游戏体一定要好好命名，不要重名&quot;&gt;&lt;a href=&quot;#unity的游戏体一定要好好命名，不要重名&quot; class=&quot;headerlink&quot; title=&quot;unity的游戏体一定要好好命名，不要重名&quot;&gt;&lt;/a&gt;unity的游戏体一定要好好命名，不要重名&lt;/h3&gt;&lt;p&gt;不重名是因为后续基本都是用GameObject.Find(“”)查找游戏体。&lt;/p&gt;&lt;p&gt;查找的时候务必加上多级路径提升查找效率；&lt;br&gt;多次使用要提前查找、赋值给变量；&lt;br&gt;所有查找放在Start()里。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="注意事项" scheme="https://inspiring26.github.io/tags/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>unity引用游戏体的两种方式</title>
    <link href="https://inspiring26.github.io/2020/04/14/unity%E5%BC%95%E7%94%A8%E6%B8%B8%E6%88%8F%E4%BD%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://inspiring26.github.io/2020/04/14/unity引用游戏体的两种方式/</id>
    <published>2020-04-14T02:01:49.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。"><a href="#第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。" class="headerlink" title="第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。"></a>第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。</h3><h3 id="第二种是使用"><a href="#第二种是使用" class="headerlink" title="第二种是使用"></a>第二种是使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameObject.Find(&quot;Bricks1&quot;)</span><br></pre></td></tr></table></figure><p>只要名字不重复，随时可以使用，但是每次使用都要Find效率略低，不能Find未激活的游戏体。<br>并且要注意游戏体是否被其他程序设置为未激活了，比如你前一步程序把它的父物体设置未激活了就会导致找不到实体。</p><a id="more"></a><h3 id="GameObject-Find-有很多缺陷，不能引用各种未激活的游戏体，比如开始游戏要激活某个游戏体就不能用它。只要是经历过未激活状态的就不能再用它激活。"><a href="#GameObject-Find-有很多缺陷，不能引用各种未激活的游戏体，比如开始游戏要激活某个游戏体就不能用它。只要是经历过未激活状态的就不能再用它激活。" class="headerlink" title="GameObject.Find() 有很多缺陷，不能引用各种未激活的游戏体，比如开始游戏要激活某个游戏体就不能用它。只要是经历过未激活状态的就不能再用它激活。"></a>GameObject.Find() 有很多缺陷，不能引用各种未激活的游戏体，比如开始游戏要激活某个游戏体就不能用它。只要是经历过未激活状态的就不能再用它激活。</h3><h3 id="不想大量提前声明，使用GameObject-Find-而又不导致无法引用错误的方法是，将2D、3D物体的scale分别变为（0，0，1）和（0，0，0）。"><a href="#不想大量提前声明，使用GameObject-Find-而又不导致无法引用错误的方法是，将2D、3D物体的scale分别变为（0，0，1）和（0，0，0）。" class="headerlink" title="不想大量提前声明，使用GameObject.Find()而又不导致无法引用错误的方法是，将2D、3D物体的scale分别变为（0，0，1）和（0，0，0）。"></a>不想大量提前声明，使用GameObject.Find()而又不导致无法引用错误的方法是，将2D、3D物体的scale分别变为（0，0，1）和（0，0，0）。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。&quot;&gt;&lt;a href=&quot;#第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。&quot; class=&quot;headerlink&quot; title=&quot;第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。&quot;&gt;&lt;/a&gt;第一种是在脚本的类里方法外public声明，挂载后拉上去，好处是可以处理未激活的游戏体，一次声明多次使用。&lt;/h3&gt;&lt;h3 id=&quot;第二种是使用&quot;&gt;&lt;a href=&quot;#第二种是使用&quot; class=&quot;headerlink&quot; title=&quot;第二种是使用&quot;&gt;&lt;/a&gt;第二种是使用&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GameObject.Find(&amp;quot;Bricks1&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只要名字不重复，随时可以使用，但是每次使用都要Find效率略低，不能Find未激活的游戏体。&lt;br&gt;并且要注意游戏体是否被其他程序设置为未激活了，比如你前一步程序把它的父物体设置未激活了就会导致找不到实体。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity的GameObject</title>
    <link href="https://inspiring26.github.io/2020/04/13/unity%E7%9A%84GameObject/"/>
    <id>https://inspiring26.github.io/2020/04/13/unity的GameObject/</id>
    <published>2020-04-13T08:41:26.000Z</published>
    <updated>2020-05-07T05:27:53.737Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameObject.Find(&quot;Bricks1&quot;).GetComponent&lt;MakeBricksMove&gt;().enabled&#x3D;true;</span><br></pre></td></tr></table></figure><p>可以调用很多游戏体，但是不能调用没激活的游戏体。<br>要调用没预先没激活的游戏体，需要用public声明引用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity的Image透明度</title>
    <link href="https://inspiring26.github.io/2020/04/13/unity%E7%9A%84Image%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    <id>https://inspiring26.github.io/2020/04/13/unity的Image透明度/</id>
    <published>2020-04-13T07:30:14.000Z</published>
    <updated>2020-05-07T05:27:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>unity UI的Image，如果设置为透明只需在颜色里调整A值就可以了。<br>A值代表的是不透明度，越大越不透明。<br>但是当值为0和1或255和254时是很不同的，代表了一种开关。<br>要使背景全透，就要设置为1，不能设置为0。<br>除此外，可以加上不同的颜色形成不同颜色的遮罩。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;unity UI的Image，如果设置为透明只需在颜色里调整A值就可以了。&lt;br&gt;A值代表的是不透明度，越大越不透明。&lt;br&gt;但是当值为0和1或255和254时是很不同的，代表了一种开关。&lt;br&gt;要使背景全透，就要设置为1，不能设置为0。&lt;br&gt;除此外，可以加上不同的颜色形
      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity设置游戏暂停透明背景</title>
    <link href="https://inspiring26.github.io/2020/04/13/unity%E8%AE%BE%E7%BD%AE%E6%B8%B8%E6%88%8F%E6%9A%82%E5%81%9C%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF/"/>
    <id>https://inspiring26.github.io/2020/04/13/unity设置游戏暂停透明背景/</id>
    <published>2020-04-13T02:23:09.000Z</published>
    <updated>2020-05-07T05:27:53.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加一个全屏Image"><a href="#添加一个全屏Image" class="headerlink" title="添加一个全屏Image"></a>添加一个全屏Image</h3><h3 id="将颜色修改为黑色，如090919"><a href="#将颜色修改为黑色，如090919" class="headerlink" title="将颜色修改为黑色，如090919"></a>将颜色修改为黑色，如090919</h3><h3 id="将A值调到200，代表不透明程度"><a href="#将A值调到200，代表不透明程度" class="headerlink" title="将A值调到200，代表不透明程度"></a>将A值调到200，代表不透明程度</h3><h3 id="这样就建立了一个继续显示游戏内容的暂停界面"><a href="#这样就建立了一个继续显示游戏内容的暂停界面" class="headerlink" title="这样就建立了一个继续显示游戏内容的暂停界面"></a>这样就建立了一个继续显示游戏内容的暂停界面</h3><p><img src="/2020/04/13/unity%E8%AE%BE%E7%BD%AE%E6%B8%B8%E6%88%8F%E6%9A%82%E5%81%9C%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF/4.0.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加一个全屏Image&quot;&gt;&lt;a href=&quot;#添加一个全屏Image&quot; class=&quot;headerlink&quot; title=&quot;添加一个全屏Image&quot;&gt;&lt;/a&gt;添加一个全屏Image&lt;/h3&gt;&lt;h3 id=&quot;将颜色修改为黑色，如090919&quot;&gt;&lt;a href=&quot;#将
      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity创建滑动拉近的选关界面</title>
    <link href="https://inspiring26.github.io/2020/04/08/unity%E5%88%9B%E5%BB%BA%E6%BB%91%E5%8A%A8%E6%8B%89%E8%BF%91%E7%9A%84%E9%80%89%E5%85%B3%E7%95%8C%E9%9D%A2/"/>
    <id>https://inspiring26.github.io/2020/04/08/unity创建滑动拉近的选关界面/</id>
    <published>2020-04-08T07:22:13.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>通过修改要显示的关卡图片的大小和位置，就能实现一种类似初代iphone滑动选择专辑的界面。<br><img src="/2020/04/08/unity%E5%88%9B%E5%BB%BA%E6%BB%91%E5%8A%A8%E6%8B%89%E8%BF%91%E7%9A%84%E9%80%89%E5%85%B3%E7%95%8C%E9%9D%A2/1.0.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过修改要显示的关卡图片的大小和位置，就能实现一种类似初代iphone滑动选择专辑的界面。&lt;br&gt;&lt;img src=&quot;/2020/04/08/unity%E5%88%9B%E5%BB%BA%E6%BB%91%E5%8A%A8%E6%8B%89%E8%BF%91%E7%9A%
      
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity创建滚动条</title>
    <link href="https://inspiring26.github.io/2020/04/08/unity%E5%88%9B%E5%BB%BA%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <id>https://inspiring26.github.io/2020/04/08/unity创建滚动条/</id>
    <published>2020-04-08T06:05:34.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>在遮挡图片同级创建一个scrollbar，<br>调整他的位置及滑动方向，一般选第三个bottom to top，<br>然后在遮蔽图片的scroll rect组件中有一个vertical Scrollbar区域来添加竖向滑动。</p><a id="more"></a><p>结构：<br>— 背景图片<br>— — 遮蔽图片<br>— — — 要显示的内容<br>— — Scrollbar</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在遮挡图片同级创建一个scrollbar，&lt;br&gt;调整他的位置及滑动方向，一般选第三个bottom to top，&lt;br&gt;然后在遮蔽图片的scroll rect组件中有一个vertical Scrollbar区域来添加竖向滑动。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unity切换场景的方法</title>
    <link href="https://inspiring26.github.io/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://inspiring26.github.io/2020/04/03/unity切换场景的方法/</id>
    <published>2020-04-03T08:07:56.000Z</published>
    <updated>2020-05-07T05:27:53.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目前了解到的切换场景、页面的方法是创建多个场景进行跳转"><a href="#目前了解到的切换场景、页面的方法是创建多个场景进行跳转" class="headerlink" title="目前了解到的切换场景、页面的方法是创建多个场景进行跳转"></a>目前了解到的切换场景、页面的方法是创建多个场景进行跳转</h3><h3 id="创建两个空场景n1、n2"><a href="#创建两个空场景n1、n2" class="headerlink" title="创建两个空场景n1、n2"></a>创建两个空场景n1、n2</h3><h3 id="同时加载n1、n2，在file-gt-build-setting里添加两个场景，使编号分别为0、1，关闭设置窗口。"><a href="#同时加载n1、n2，在file-gt-build-setting里添加两个场景，使编号分别为0、1，关闭设置窗口。" class="headerlink" title="同时加载n1、n2，在file-&gt;build setting里添加两个场景，使编号分别为0、1，关闭设置窗口。"></a>同时加载n1、n2，在file-&gt;build setting里添加两个场景，使编号分别为0、1，关闭设置窗口。</h3><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/3.0.png" alt><br><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/3.1.png" alt></p><h3 id="单独打开n1，让n2不加载或者移除n2"><a href="#单独打开n1，让n2不加载或者移除n2" class="headerlink" title="单独打开n1，让n2不加载或者移除n2"></a>单独打开n1，让n2不加载或者移除n2</h3><a id="more"></a><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/4.0.png" alt></p><h3 id="在层级窗口，创建UI-gt-Button"><a href="#在层级窗口，创建UI-gt-Button" class="headerlink" title="在层级窗口，创建UI-&gt;Button"></a>在层级窗口，创建UI-&gt;Button</h3><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/5.0.png" alt></p><h3 id="在项目窗口创建c-sharp文件，命名为Jump，如下图编辑此文件。"><a href="#在项目窗口创建c-sharp文件，命名为Jump，如下图编辑此文件。" class="headerlink" title="在项目窗口创建c sharp文件，命名为Jump，如下图编辑此文件。"></a>在项目窗口创建c sharp文件，命名为Jump，如下图编辑此文件。</h3><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/6.0.png" alt><br><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/6.1.png" alt></p><h3 id="将Jump拉到Canvas的检视窗口，为什么要拉到这里，是因为下一步添加脚本不能直接拉C-sharp文件，需要拉一个游戏体。"><a href="#将Jump拉到Canvas的检视窗口，为什么要拉到这里，是因为下一步添加脚本不能直接拉C-sharp文件，需要拉一个游戏体。" class="headerlink" title="将Jump拉到Canvas的检视窗口，为什么要拉到这里，是因为下一步添加脚本不能直接拉C sharp文件，需要拉一个游戏体。"></a>将Jump拉到Canvas的检视窗口，为什么要拉到这里，是因为下一步添加脚本不能直接拉C sharp文件，需要拉一个游戏体。</h3><p>这一步可以理解为安置，下一步理解为引用。</p><h3 id="选中Button游戏体，在检视窗口的button脚本下按加号，将Canvas游戏体拉到runtime-only下，在runtime-only右选择Jump-OnLoginButtonClick"><a href="#选中Button游戏体，在检视窗口的button脚本下按加号，将Canvas游戏体拉到runtime-only下，在runtime-only右选择Jump-OnLoginButtonClick" class="headerlink" title="选中Button游戏体，在检视窗口的button脚本下按加号，将Canvas游戏体拉到runtime only下，在runtime only右选择Jump.OnLoginButtonClick"></a>选中Button游戏体，在检视窗口的button脚本下按加号，将Canvas游戏体拉到runtime only下，在runtime only右选择Jump.OnLoginButtonClick</h3><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/8.0.png" alt></p><h3 id="加载n2，卸载n1，创建Image，拉一张图片到检视窗口的下图位置，图片要先处理为精灵，调整长宽。"><a href="#加载n2，卸载n1，创建Image，拉一张图片到检视窗口的下图位置，图片要先处理为精灵，调整长宽。" class="headerlink" title="加载n2，卸载n1，创建Image，拉一张图片到检视窗口的下图位置，图片要先处理为精灵，调整长宽。"></a>加载n2，卸载n1，创建Image，拉一张图片到检视窗口的下图位置，图片要先处理为精灵，调整长宽。</h3><p><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/9.0.png" alt><br><img src="/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/9.1.png" alt></p><h3 id="保存场景，加载n1，卸载n2，paly，成功。"><a href="#保存场景，加载n1，卸载n2，paly，成功。" class="headerlink" title="保存场景，加载n1，卸载n2，paly，成功。"></a>保存场景，加载n1，卸载n2，paly，成功。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目前了解到的切换场景、页面的方法是创建多个场景进行跳转&quot;&gt;&lt;a href=&quot;#目前了解到的切换场景、页面的方法是创建多个场景进行跳转&quot; class=&quot;headerlink&quot; title=&quot;目前了解到的切换场景、页面的方法是创建多个场景进行跳转&quot;&gt;&lt;/a&gt;目前了解到的切换场景、页面的方法是创建多个场景进行跳转&lt;/h3&gt;&lt;h3 id=&quot;创建两个空场景n1、n2&quot;&gt;&lt;a href=&quot;#创建两个空场景n1、n2&quot; class=&quot;headerlink&quot; title=&quot;创建两个空场景n1、n2&quot;&gt;&lt;/a&gt;创建两个空场景n1、n2&lt;/h3&gt;&lt;h3 id=&quot;同时加载n1、n2，在file-gt-build-setting里添加两个场景，使编号分别为0、1，关闭设置窗口。&quot;&gt;&lt;a href=&quot;#同时加载n1、n2，在file-gt-build-setting里添加两个场景，使编号分别为0、1，关闭设置窗口。&quot; class=&quot;headerlink&quot; title=&quot;同时加载n1、n2，在file-&amp;gt;build setting里添加两个场景，使编号分别为0、1，关闭设置窗口。&quot;&gt;&lt;/a&gt;同时加载n1、n2，在file-&amp;gt;build setting里添加两个场景，使编号分别为0、1，关闭设置窗口。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/3.0.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/2020/04/03/unity%E5%88%87%E6%8D%A2%E5%9C%BA%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/3.1.png&quot; alt&gt;&lt;/p&gt;&lt;h3 id=&quot;单独打开n1，让n2不加载或者移除n2&quot;&gt;&lt;a href=&quot;#单独打开n1，让n2不加载或者移除n2&quot; class=&quot;headerlink&quot; title=&quot;单独打开n1，让n2不加载或者移除n2&quot;&gt;&lt;/a&gt;单独打开n1，让n2不加载或者移除n2&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="unity" scheme="https://inspiring26.github.io/tags/unity/"/>
    
      <category term="方法" scheme="https://inspiring26.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
